// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// All Player stats are totals over the entire season
model Player {
  id                Int                  @id @default(autoincrement())
  player_name       String
  age               Int
  games             Int
  games_started     Int
  minutes_played    Int
  field_goals       Int
  field_attempts    Int
  field_percent     Float
  three_fg          Int
  three_attempts    Int
  three_percent     Float
  two_fg            Int
  two_attempts      Int
  two_percent       Float
  effect_fg_percent String
  ft                Int
  fta               Int
  ft_percent        Float
  ORB               Int // Offensive Rebound
  DRB               Int // Defensive Rebound
  TRB               Int // Total Rebounds
  AST               Int // Assists
  STL               Int // Steals
  BLK               Int // Blocks
  TOV               Int // Turnovers
  PF                Int // Personal Fouls
  PTS               Int // Points
  team              String
  createdAt         DateTime             @default(now())
  teamPlayer        MyTeamPlayer[]
  opponent          OpponentTeamPlayer[]
}

model MyTeamPlayer {
  id                     Int    @id @default(autoincrement())
  player                 Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId               Int
  playerName             String @default("")
  user                   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 Int
  outsideOffenseScore    Int    @default(0)
  insideOffenseScore     Int    @default(0)
  offenseDisciplineScore Int    @default(0)
  defenseDisciplineScore Int    @default(0)
  consistencyScore       Int    @default(0)
  reboundingScore        Int    @default(0)
}

model User {
  id            Int                  @id @default(autoincrement())
  username      String               @unique
  password      String
  myTeamPlayers MyTeamPlayer[]
  opponents     OpponentTeamPlayer[]
}

model OpponentTeamPlayer {
  id                     Int    @id @default(autoincrement())
  player                 Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId               Int
  user                   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 Int
  playerName             String @default("")
  outsideOffenseScore    Int    @default(0)
  insideOffenseScore     Int    @default(0)
  offenseDisciplineScore Int    @default(0)
  defenseDisciplineScore Int    @default(0)
  consistencyScore       Int    @default(0)
  reboundingScore        Int    @default(0)
}
